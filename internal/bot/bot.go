package bot

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"go-telegram-bot/config"
	"go-telegram-bot/internal/weather"

	tele "gopkg.in/telebot.v3"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
type Bot struct {
	bot     *tele.Bot
	weather *weather.Client
	config  *config.Config
}

// WebAppData –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
type WebAppData struct {
	City      string `json:"city"`
	Timestamp int64  `json:"timestamp,omitempty"`
	UserID    int64  `json:"user_id,omitempty"`
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func New(cfg *config.Config) (*Bot, error) {
	pref := tele.Settings{
		Token:  cfg.TelegramToken,
		Poller: &tele.LongPoller{Timeout: 10},
	}

	b, err := tele.NewBot(pref)
	if err != nil {
		return nil, err
	}

	w := weather.New(cfg.WeatherAPIKey)

	return &Bot{
		bot:     b,
		weather: w,
		config:  cfg,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ HTTP —Å–µ—Ä–≤–µ—Ä
func (b *Bot) Start() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è WebApp
	go b.startHTTPServer()

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
	webapp := &tele.WebApp{
		URL: b.config.WebAppURL,
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è WebApp
	menuBtn := &tele.ReplyMarkup{}
	menuBtn.InlineKeyboard = [][]tele.InlineButton{
		{
			tele.InlineButton{
				Text:   "üå§ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
				WebApp: webapp,
			},
		},
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	b.bot.Handle("/start", func(c tele.Context) error {
		message := "–ü—Ä–∏–≤–µ—Ç! –Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç –Ω–∞ Go.\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
		return c.Send(message, menuBtn)
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
	b.bot.Handle("/help", func(c tele.Context) error {
		helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç
/weather <–≥–æ—Ä–æ–¥> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ
/app - –û—Ç–∫—Ä—ã—Ç—å –ø–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`
		return c.Send(helpText)
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
	b.bot.Handle("/app", func(c tele.Context) error {
		message := "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
		return c.Send(message, menuBtn)
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /echo
	b.bot.Handle("/echo", func(c tele.Context) error {
		text := c.Message().Payload
		if text == "" {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /echo")
		}
		return c.Send(text)
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
	b.bot.Handle("/weather", func(c tele.Context) error {
		city := c.Message().Payload
		if city == "" {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather\n–ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
		}

		return b.sendWeatherResponse(c, city)
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
	b.bot.Handle(tele.OnWebApp, func(c tele.Context) error {
		var data WebAppData
		if err := json.Unmarshal([]byte(c.Message().WebAppData.Data), &data); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö WebApp: %v", err)
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
		}

		if strings.TrimSpace(data.City) == "" {
			return c.Send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥")
		}

		return b.sendWeatherResponse(c, data.City)
	})

	log.Println("Bot started...")
	b.bot.Start()
}

// sendWeatherResponse –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
func (b *Bot) sendWeatherResponse(c tele.Context, city string) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
	weather, err := b.weather.GetWeather(city)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: %v", err))
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π
	message := fmt.Sprintf("üå° –ü–æ–≥–æ–¥–∞ –≤ %s, %s:\n"+
		"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞C)\n"+
		"–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: %s\n"+
		"–í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\n"+
		"–í–µ—Ç–µ—Ä: %.1f –∫–º/—á, %s\n"+
		"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: %d%%\n"+
		"–£–§-–∏–Ω–¥–µ–∫—Å: %.1f",
		weather.Location.Name,
		weather.Location.Country,
		weather.Current.TempC,
		weather.Current.FeelsLikeC,
		weather.Current.Condition.Text,
		weather.Current.Humidity,
		weather.Current.WindKph,
		weather.Current.WindDir,
		weather.Current.Cloud,
		weather.Current.UV,
	)

	return c.Send(message)
}

// startHTTPServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è WebApp
func (b *Bot) startHTTPServer() {
	// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("web/static/"))))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã WebApp
	http.HandleFunc("/", b.serveWebApp)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API endpoint (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
	http.HandleFunc("/api/weather", b.handleWeatherAPI)

	log.Printf("Starting HTTP server on :%s...", b.config.HTTPPort)
	if err := http.ListenAndServe(":"+b.config.HTTPPort, nil); err != nil {
		log.Printf("HTTP server error: %v", err)
	}
}

// serveWebApp –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É WebApp
func (b *Bot) serveWebApp(w http.ResponseWriter, r *http.Request) {
	// –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
	htmlContent, err := http.Dir("web").Open("index.html")
	if err != nil {
		log.Printf("Error opening HTML file: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer htmlContent.Close()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
	w.Header().Set("Pragma", "no-cache")
	w.Header().Set("Expires", "0")

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–≤–µ—Ç
	http.ServeContent(w, r, "index.html", time.Time{}, htmlContent)
}

// handleWeatherAPI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
func (b *Bot) handleWeatherAPI(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"status": "ok", "message": "Weather API endpoint"}`))
}
